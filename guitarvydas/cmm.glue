main [@findMacros] = [[${findMacros}]]

findMacro_macro [nl x] = [[${nl}${x}]]
findMacro_default [x] = [[${x}]]

Macro_first [k Param] = [[${Param}->data]]
Macro_reverse [k Param] = [[${Param} = listReverse (${Param})]]
Macro_rest [k Param] = [[${Param}->next]]
Macro_isEmpty [k Param] = [[NULL == ${Param}]]
Macro_newListCell [k Param] = [[listNewCell (${Param})]]
Macro_append [k TwoParams] = [[${k}${TwoParams})]]

Macro_newComponent [k TwoParams] = [[${k}${TwoParams}]]
Macro_field [k Param] = [[${k}${Param}]]
Macro_appendInput [k TwoParams] = [[${k}${TwoParams}]]
Macro_popInput [k Param] = [[${k}${Param}]]
Macro_callReaction [k TwoParams] = [[${k}${TwoParams}]]
Macro_hasInputs [k Param] = [[${support.popParam ()}->inputQueue]]

Macro_newMessage [k Param] = [[${k}${Param}]]
Macro_data [k Param] = [[${support.popParam ()}->data]]

Macro_connectedTo [k Param] = [[${k}${Param}]]
Macro_connect [k TwoParams] = [[${k}${TwoParams}]]

Macro_withLock [k Block] = [[${k}${Block}\n]]
Macro_send [k TwoParams] = [[${k}${TwoParams}]]
Macro_panic [k Param] = [[${k}${Param}]]

Macro_initializeCounter [m] = [[counter = 0]]
Macro_decCounter [m] = [[counter -= 1]]
Macro_counterIsGreaterThanZero [m] = [[counter > 0]]

Param [klp Expr krp] = [[${support.pushParam1 (Expr)}]]
TwoParams [klp Expr1 kcomma Expr2 krp] = [[${support.pushParam1 (Expr1)}${support.pushParam2 (Expr2)}]]


Expr_funccall [expr klp @Arglist krp] = [[${expr}(${Arglist})]]

Expr_nested [klp expr krp] = [[${klp}${expr}${krp}]]
Expr_flat [c] = [[${c}]]

Arglist [@ArgComma] = [[${ArgComma}]]
ArgComma [expr kcomma] = [[${expr},]]

block_nested [klbrace @Block krbrace] = [[${klbrace}${Block}${krbrace}]]
block_raw [notBrace] = [[${notBrace}]]

notBrace [c] = [[${c}]]

space [c] = [[${c}]]

comment [kss @notNL nl] = [[${kss}${notNL}${nl}]]

nl [c] = [[${c}]]
notNL [c] = [[${c}]]

dollar [c] = [[${c}]]

ws [c] = [[${c}]]